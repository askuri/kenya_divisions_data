<?php

// CONFIG
define('INPUT_FILE', 'kenya_wards_centroids.csv');
define('OUTPUT_FILE', 'kenya_wards_centroids_cleaned.csv');
define('HAS_HEADER_ROW', true); // header row should not be processed. put 'true' here to skip it.
define('COL_X', 0);
define('COL_Y', 1);
define('COL_GID', 2);
define('COL_POPULATION', 3);
define('COL_COUNTY', 4);
define('COL_SUBCOUNTY', 5);
define('COL_WARD', 6);
define('COL_UID', 7);
define('COL_SCUID', 8);
define('COL_CUID', 9);

function console($text) {
    echo $text.PHP_EOL;
}

/**
 * Convert "THis weIrd Text" to "This Weird Text"
 */
function titleCase($input) {
    return ucwords(strtolower($input));
}

/**
 * Capitalize after character: Convert "This-test" to "This-Test" where char = '-'
 */
function capitalizeAfterChar($input, $char) {
    return implode($char, array_map('ucfirst', explode($char, $input)));
}

/**
 * Removes double (or more) whitespaces by a single space.
 * Source https://stackoverflow.com/questions/2326125/remove-multiple-whitespaces
 */
function removeUnnecessarySpaces($input) {
    return preg_replace('/\s+/', ' ', $input);
}

function removeDivisionNames($input) {
    $input = str_ireplace(' sub county', '', $input);
    $input = str_ireplace(' sub- county', '', $input);
    $input = str_ireplace(' sub-county', '', $input);
    $input = str_ireplace(' county', '', $input);
    $input = str_ireplace(' ward', '', $input);
    return $input;
}

/**
 * Writes an array of the following structure into $output:
    Array
    (
        [uid] => Array
        (
            [0] => name
        )
    )
 * Names will only we written once. The purpose is to see whether a UID has multiple names (checked in showAmbiguousUIDS()).
 *
 * @param $output array data store for tracking
 * @param $uid string identifier, used as key
 * @param $name string value
 */
function trackAmbiguousUIDs(&$output, $uid, $name) {
    if (!in_array($name, $output[$uid] ?? [])) {
        $output[$uid][] = $name;
    }
}

/**
 * Show a message in the console if there is multiple names using the same UID
 * @param $array array an array as generated by trackAmbiguousUIDs()
 */
function showAmbiguousUIDs($array) {
    foreach ($array as $cuid => $names) {
        if (count($names) > 1) {
            $namesJoined = implode('; ', $names);
            console("ID '$cuid' does have multiple names: $namesJoined. Please fix that manually in the source file.");
        }
    }
}

// open file handles
if (($inputHandle = fopen(INPUT_FILE, 'r')) == false) {
    console('Can\'t read input csv file');
}
if (($outputHandle = fopen(OUTPUT_FILE, 'w')) == false) {
    console('Can\'t read output csv file');
}

$county_ids = [];
$subcounty_ids = [];
$ward_ids = [];
$i = 0;
while (($line = fgetcsv($inputHandle)) !== false) {
    // skip first line if it's a header
    if (HAS_HEADER_ROW && $i++ == 0) continue;

    foreach ($line as $col_id => &$item) {
        switch ($col_id) {
            case COL_GID:
            case COL_POPULATION:
                // For GID: numeric identifier is an integer, although i saw it being saved with .0 appended.
                // For population: also integer, we don't cut people into pieces ...
                $item = (int) $item;
                break;
            case COL_COUNTY:
            case COL_SUBCOUNTY:
            case COL_WARD:
                $item = titleCase($item);
                $item = capitalizeAfterChar($item, '-');
                $item = capitalizeAfterChar($item, '/');
                $item = removeUnnecessarySpaces($item);
                $item = removeDivisionNames($item);
                $item = trim($item);
                break;
        }
    }

    trackAmbiguousUIDs($county_ids, $line[COL_CUID], $line[COL_COUNTY]);
    trackAmbiguousUIDs($subcounty_ids, $line[COL_SCUID], $line[COL_SUBCOUNTY]);
    trackAmbiguousUIDs($ward_ids, $line[COL_UID], $line[COL_WARD]);

    fputcsv($outputHandle, $line);
}

showAmbiguousUIDs($county_ids);
showAmbiguousUIDs($subcounty_ids);
showAmbiguousUIDs($ward_ids);

console("Total amount of counties:" . count($county_ids));
console("Total amount of sub-counties:" . count($subcounty_ids));
console("Total amount of wards:" . count($ward_ids));

console('Job finished.');
